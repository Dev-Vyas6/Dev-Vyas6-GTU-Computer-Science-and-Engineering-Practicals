7.1  Aim : write a program that define a function to add first n number. 

#include <conio.h>
#include <stdio.h>
int add(intx);
{
  int i sum = 0;
  for (i - 1 i <= xi++) {
    sum = sum + i;
  }
  return (sum) void main() {
    int I, j, n, k;
    clrscr();
    printf(“enter the number :”);
    scanf(“%d”,&n0; 
    k=add(n); 
    printf(“the sum pf k is %d”,k); 
    getch();
  }

7.2  Aim : Write a function in the program to return 1 if number is prime otherwise return 0.

#include <conio.h>
#include <stdio.h>
int prime(int);
void main() {
  int n, p;
  clrscr();
  printf("Enter the number:");
  scanf("%d", &n);
  p = prime(n);
  if (p == 1) {
    printf("\n %d is prime", n);
  } else {
    printf("\n %d is not prime", n);
  }
  getch();
  return 0;
}
int prime(int n) {
  int i;
  for (i = 2; i <= n; i++) {
    if (n % i == 0) {
      return 0;
    } 
    else {
      return 1;
    }
  }
  return (0);
}

7.3 Aim : Write a function Exchange to interchange the values of two variables, say x and y.
illustrate the use of this function in a calling function. Write a function Exchange to
interchange the values of two variables, say x and y. illustrate the use of this function in a
calling function.

#include<stdio.h>
#include<conio.h>
void Exchange(int a,int b);
{
 
a=a+b
b=a-b
a=a-b
printf(“\n value of a and b inside swap is:”);
printf(“\n a+%d \t b=%d”,a,b);
}
vod main()
{
 
int x,y; 
 
clrscr(); 
 
printf("\n Enter the value for x="); 
 
scanf("%d",&x); 
 
printf("\n Enter the value for y="); 
 
scanf("%d",&y); 
 
swap(x,y); 
 
printf("\n the value of a and b after calling swap is:”); 
 
printf(“\n a=%d \t b=%d”,x,y); 
 
getch(); 
}

7.4 Aim : Write a C program to use recursive calls to evaluate 

#include <math.h>
#include <stdio.h>

float rec_call(int, int);
int fact(int);

int main() {
  int n, x;
  float sum = 0;
  printf("\n Enter Value of X :");
  scanf("%d", &x);
  printf("\n Enter no of iteration n :");
  scanf("%d", &n);
  sum = rec_call(x, n);
  printf("Sum = %f", sum);
  return 0;
}

float rec_call(int x, int n) {
  static float sum;
  if (n == 1)
    return sum + x;
  if (n % 2 == 0) {
    sum = sum - ((pow(x, (2 * n) - 1) * 1.0) / fact((2 * n) - 1));
  } else {
    sum = sum + ((pow(x, (2 * n) - 1) * 1.0) / fact((2 * n) - 1));
  }
  rec_call(x, --n);
}

int fact(int n) {
  if (n == 1)
    return 1;

  return n * fact(n - 1);
}

7.5  Aim : Write a program to find factorial of a number using recursion. 

#include<stdio.h>

int fact(int);

int main()
{
 int n;
 printf("\n Enter Value of n :");
 scanf("%d",&n);
 printf("Factorial = %d",fact(n));
 return 0;
}

int fact(int n)
{
 if(n==1)
            {
       return 1;
            }
 return n * fact(n-1);
}

7.6 Aim : Write a C program using global variable, static variable. 

#include <stdio.h>

int fact();
int n;
int main() {
  printf("\n Enter Value of n :");
  scanf("%d", &n);
  printf("Factorial = %d", fact());
  return 0;
}

int fact() {
  static int ans = 1;
  if (n == 1) {
    return ans;
  }
  ans = n-- * fact();
}

7.7 Aim : Write a function that will scan a character string passed as an argument and
convert all lowercase character into their uppercase equivalents. 

#include <stdio.h>

void UpperCase(char *);

int main(void) {
  char str[50];
  printf("Enter String : ");
  scanf("%s", str);
  UpperCase(str);
  printf("String in Upper Case : %s", str);
  return 0;
}

void UpperCase(char *ch) {
  int i = 0;
  while (ch[i] != '\0') {
    if (ch[i] >= 'a' && ch[i] <= 'z') {
      ch[i] = ch[i] - 32;
    }
    i++;
  }
}

7.8 Aim : Write a program to sort given array in ascending order (Use Insertion sort, Bubble
sort, Selection sort, Mergesort, Quicksort, Heapsort). 

#include <conio.h>
#include <stdio.h>
#include <stdlib.h>

int smallest(int arr[], int k, int n) {
  int pos = k, small = arr[k], i;
  for (i = k + 1; i < n; i++) {
    if (arr[i] < small) {
      small = arr[i];
      pos = i;
    }
  }
  return pos;
}

void selection_sort(int arr[], int n) {
  int k, pos, temp;
  for (k = 0; k < n; k++) {
    pos = smallest(arr, k, n);
    temp = arr[k];
    arr[k] = arr[pos];
    arr[pos] = temp;
  }
}

void insertion_sort(int arr[], int n) {
  int i, j, temp;
  for (i = 1; i < n; i++) {
    temp = arr[i];
    j = i - 1;
    while ((temp < arr[j]) && (j >= 0)) {
      arr[j + 1] = arr[j];
      j--;
    }
    arr[j + 1] = temp;
  }
}
void merge(int arr[], int beg, int mid, int end) {
  int i = beg, j = mid + 1, index = beg, temp[10], k;
  while ((i <= mid) && (j <= end)) {
    if (arr[i] < arr[j]) {
      temp[index] = arr[i];
      i++;
    } else {
      temp[index] = arr[j];
      j++;
    }
    index++;
  }
  if (i > mid) {
    while (j <= end) {
      temp[index] = arr[j];
      j++;
      index++;
    }
  } else {
    while (i <= mid) {
      temp[index] = arr[i];
      i++;
      index++;
    }
  }
  for (k = beg; k < index; k++)
    arr[k] = temp[k];
}

void merge_sort(int arr[], int beg, int end) {
  int mid;
  if (beg < end) {
    mid = (beg + end) / 2;
    merge_sort(arr, beg, mid);
    merge_sort(arr, mid + 1, end);
    merge(arr, beg, mid, end);
  }
}
int partition(int a[], int beg, int end) {
  int left, right, temp, loc, flag;
  loc = left = beg;
  right = end;
  flag = 0;
  while (flag != 1) {
    while ((a[loc] <= a[right]) && (loc != right))
      right--;
    if (loc == right)
      flag = 1;
    else if (a[loc] > a[right]) {

      temp = a[loc];

      a[loc] = a[right];

      a[right] = temp;

      loc = right;
    }
    if (flag != 1) {
      while ((a[loc] >= a[left]) && (loc != left))
        left++;
      if (loc == left)
        flag = 1;
      else if (a[loc] < a[left]) {
        temp = a[loc];
        a[loc] = a[left];
        a[left] = temp;
        loc = left;
      }
    }
  }
  return loc;
}

void quick_sort(int a[], int beg, int end) {
  int loc;
  if (beg < end) {
    loc = partition(a, beg, end);
    quick_sort(a, beg, loc - 1);
    quick_sort(a, loc + 1, end);
  }
}
int main() {
  int ch;
  clrscr();
  printf(“Enter 1 for Bubble Sort \nEnter 2 for Selection Sort \n Enter 3 for Insertion Sort \nEnter 4
for Merge Sort \nEnter 5 for Quick Sort\n\n”);
  printf(“Enter Your Choice :”);
  scanf(“% d”, &ch);
  switch (ch) {
  case 1: // Bubble Sort
  {
    int i, n, temp, j, arr[10];
    printf("\n You have selected Bubble Sort:: ");
    printf("\n Enter the number of elements in the array : ");
    scanf("%d", &n);
    printf("\n Enter the elements: ");
    for (i = 0; i < n; i++) {
      scanf("%d", &arr[i]);
    }
    for (i = 0; i < n; i++) {
      for (j = 0; j < n–i–1; j++) {

        if (arr[j] > arr[j + 1])

        {

          temp = arr[j];

          arr[j] = arr[j + 1];

          arr[j + 1] = temp;
        }
      }
    }
    printf("\n The array sorted in ascending order by Bubble sort is :\n");
    for (i = 0; i < n; i++)
      printf("%d\t", arr[i]);
    break;
  }

  case 2: // Selection sort
  {
    int arr[10], i, n;
    printf("\n You have selected Selection Sort:: ");
    printf("\n Enter the number of elements in the array: ");
    scanf("%d", &n);
    printf("\n Enter the elements of the array: ");
    for (i = 0; i < n; i++) {
      scanf("%d", &arr[i]);
    }
    selection_sort(arr, n);
    printf("\n The sorted array by Selection sort is: \n");
    for (i = 0; i < n; i++)
      printf(" %d\t", arr[i]);

    break;
  }

  case 3: // Insertion sort
  {
    int arr[10], i, n;
    printf("\n You have selected Insertion Sort:: ");
    printf("\n Enter the number of elements in the array: ");
    scanf("%d", &n);
    printf("\n Enter the elements of the array: ");
    for (i = 0; i < n; i++) {
      scanf("%d", &arr[i]);
    }
    insertion_sort(arr, n);
    printf("\n The sorted array by Insertion sort is: \n");
    for (i = 0; i < n; i++)
      printf(" %d\t", arr[i]);
    break;
  }

  case 4: // Merge sort
  {
    int arr[10], i, n;
    printf("\n You have selected Merge Sort:: ");
    printf("\n Enter the number of elements in the array : ");
    scanf("%d", &n);
    printf("\n Enter the elements of the array: ");
    for (i = 0; i < n; i++) {
      scanf("%d", &arr[i]);
    }
    merge_sort(arr, 0, n - 1);
    printf("\n The sorted array by Merge sort is: \n");
    for (i = 0; i < n; i++)
      printf(" %d\t", arr[i]);
    break;
  }
  case 5: // Quick Sort
  {
    int arr[10], i, n;
    printf("\n You have selected Quick Sort:: ");
    printf("\n Enter the number of elements in the array: ");
    scanf("%d", &n);
    printf("\n Enter the elements of the array: ");
    for (i = 0; i < n; i++) {
      scanf("%d", &arr[i]);
    }
    quick_sort(arr, 0, n - 1);
    printf("\n The sorted array by Quick sort is: \n");
    for (i = 0; i < n; i++)
      printf(" %d\t", arr[i]);
    break;
  }
  }
  return 0;
}
